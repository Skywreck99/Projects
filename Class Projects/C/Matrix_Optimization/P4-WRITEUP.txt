                              ____________

                               P4 WRITEUP
                              ____________


- Name: (FILL THIS in)
- NetID: (THE kauf0095 IN kauf0095@umn.edu)

Answer the questions below according to the project specification. Write
your answers directly in this text file and submit it along with your
code.


PROBLEM 1: sumdiag_OPTM()
=========================

  Do your timing study on atlas.cselabs.umn.edu


(A) Paste Source Code
~~~~~~~~~~~~~~~~~~~~~

  Paste a copy of your source code for the function `sumdiag_OPTM()'

  // TWO-BY-TWO-PARTITION-MATRIX
  // 2x2 partitions of the matrix using the hidden blueprint of vertices for more optimization (Max: 56/35)
  int sumdiag_VER8(matrix_t mat, vector_t vec) {
    // OPTIMIZED CODE HERE
    int rows = mat.rows;
    int cols = mat.cols;
    if(vec.len != (rows + cols -1)){return 1;}
    for(int i=0; i<vec.len; i++){VSET(vec,i,0);}

    /*  11 12 13 14 |     11 12 | 13 14 |
        15 16 17 18 |     15 16 | 17 18 |
        19 20 21 22 | =>  ______ _______
        23 24 25 26 |     19 20 | 21 22 |
        ____________      23 24 | 25 26 |
                          ______ _______
    */

    int i;

    // Unroll the loop 4 times and access rows then columns for better memory access
    // Iterating as 4 by 4 partition of the matrix
    for (i = 0; i < rows-4; i+=4) {
      int d = rows-i-1, j;
      for (j = 0; j < cols-4; j+=4, d+=4){

        // 1 cell
        VSET(vec, d, MGET(mat, i, j) + VGET(vec, d));

        // 3 cells
        VSET(vec, d+1, MGET(mat, i, j+1) + VGET(vec, d+1));
        VSET(vec, d-1, MGET(mat, i+1, j) + VGET(vec, d-1));
        VSET(vec, d, MGET(mat, i+1, j+1) + VGET(vec, d));

        // 5 cells
        VSET(vec, d+2, MGET(mat, i, j+2) + VGET(vec, d+2));
        VSET(vec, d+1, MGET(mat, i+1, j+2) + VGET(vec, d+1));
        VSET(vec, d, MGET(mat, i+2, j+2) + VGET(vec, d));
        VSET(vec, d-1, MGET(mat, i+2, j+1) + VGET(vec, d-1));
        VSET(vec, d-2, MGET(mat, i+2, j) + VGET(vec, d-2));

        // 7 cells
        VSET(vec, d+3, MGET(mat, i, j+3) + VGET(vec, d+3));
        VSET(vec, d+2, MGET(mat, i+1, j+3) + VGET(vec, d+2));
        VSET(vec, d+1, MGET(mat, i+2, j+3) + VGET(vec, d+1));
        VSET(vec, d, MGET(mat, i+3, j+3) + VGET(vec, d));
        VSET(vec, d-1, MGET(mat, i+3, j+2) + VGET(vec, d-1));
        VSET(vec, d-2, MGET(mat, i+3, j+1) + VGET(vec, d-2));
        VSET(vec, d-3, MGET(mat, i+3, j) + VGET(vec, d-3));}

        // 1 + 3 + 5 + 7 = 16 cells = 4 by 4 matrix

      // Cleanup loop for columns
      for (; j < cols; j++, d++) {
        VSET(vec, d, MGET(mat, i, j) + VGET(vec, d));
        VSET(vec, d-1, MGET(mat, i+1, j) + VGET(vec, d-1));
        VSET(vec, d-2, MGET(mat, i+2, j) + VGET(vec, d-2));
        VSET(vec, d-3, MGET(mat, i+3, j) + VGET(vec, d-3));}
    }

    // Cleanup loop for rows
    for (; i < rows; i++) {
      int d = rows-i-1, j;
      for (j = 0; j < cols-4; j+=4, d+=4){
        VSET(vec, d, MGET(mat, i, j) + VGET(vec, d));
        VSET(vec, d+1, MGET(mat, i, j+1) + VGET(vec, d+1));
        VSET(vec, d+2, MGET(mat, i, j+2) + VGET(vec, d+2));
        VSET(vec, d+3, MGET(mat, i, j+3) + VGET(vec, d+3));}

      // Cleanup loop for columns
      for (; j < cols; j++, d++) {VSET(vec, d, MGET(mat, i, j) + VGET(vec, d));}
    }
    return 0;
  }


(B) Timing on atlas
~~~~~~~~~~~~~~~~~~~

  Paste a copy of the results of running `sudmiag_benchmark' on
  atlas.cselabs.umn.edu in the space below which shows how your
  performance optimizations improved on the baseline codes.

 $ ./sumdiag_benchmark
 ==== Matrix Diagonal Sum Benchmark Version 1 ====
   SIZE       BASE       OPTM  SPDUP POINTS
    512 6.1210e-03 1.4090e-03   4.34      4
   1024 4.0953e-02 6.6700e-03   6.14      6
   1101 4.8384e-02 7.4580e-03   6.49      6
   2048 3.1532e-01 2.6176e-02  12.05     12
   4099 1.1123e+00 1.0662e-01  10.43     10
   6001 2.4307e+00 2.0348e-01  11.95     11
   8191 1.1660e+01 4.3617e-01  26.73     26
 RAW POINTS: 75
  _   _                 _   _           _   _       _____ _    ____ _____ _
 | \ | | _____      __ | |_| |__   __ _| |_( )___  |  ___/ \  / ___|_   _| |
 |  \| |/ _ \ \ /\ / / | __| '_ \ / _` | __|// __| | |_ / _ \ \___ \ | | | |
 | |\  | (_) \ V  V /  | |_| | | | (_| | |_  \__ \ |  _/ ___ \ ___) || | |_|
 |_| \_|\___/ \_/\_/    \__|_| |_|\__,_|\__| |___/ |_|/_/   \_\____/ |_| (_)

                              ...,?77??!~~~~!???77?<~....
                         ..?7`                           `7!..
                     .,=`          ..~7^`   I                  ?1.
        ........  ..^            ?`  ..?7!1 .               ...??7
       .        .7`        .,777.. .I.    . .!          .,7!
       ..     .?         .^      .l   ?i. . .`       .,^
        b    .!        .= .?7???7~.     .>r .      .=
        .,.?4         , .^         1        `     4...
         J   ^         ,            5       `         ?<.
        .%.7;         .`     .,     .;                   .=.
        .+^ .,       .%      MML     F       .,             ?,
         P   ,,      J      .MMN     F        6               4.
         l    d,    ,       .MMM!   .t        ..               ,,
         ,    JMa..`         MMM`   .         .!                .;
          r   .M#            .M#   .%  .      .~                 .,
        dMMMNJ..!                 .P7!  .>    .         .         ,,
        .WMMMMMm  ?^..       ..,?! ..    ..   ,  Z7`        `?^..  ,,
           ?THB3       ?77?!        .Yr  .   .!   ?,              ?^C
             ?,                   .,^.` .%  .^      5.
               7,          .....?7     .^  ,`        ?.
                 `<.                 .= .`'           1
                 ....dn... ... ...,7..J=!7,           .,
              ..=     G.,7  ..,o..  .?    J.           F
            .J.  .^ ,,,t  ,^        ?^.  .^  `?~.      F
           r %J. $    5r J             ,r.1      .=.  .%
           r .77=?4.    ``,     l ., 1  .. <.       4.,
           .$..    .X..   .n..  ., J. r .`  J.       `'
         .?`  .5        `` .%   .% .' L.'    t
         ,. ..1JL          .,   J .$.?`      .
                 1.          .=` ` .J7??7<.. .;
                  JS..    ..^      L        7.:
                    `> ..       J.  4.
                     +   r `t   r ~=..G.
                     =   $  ,.  J
                     2   r   t  .;
               .,7!  r   t`7~..  j..
               j   7~L...$=.?7r   r ;?1.
                8.      .=    j ..,^   ..
               r        G              .
             .,7,        j,           .>=.
          .J??,  `T....... %             ..
       ..^     <.  ~.    ,.             .D
     .?`        1   L     .7.........?Ti..l
    ,`           L  .    .%    .`!       `j,
  .^             .  ..   .`   .^  .?7!?7+. 1
 .`              .  .`..`7.  .^  ,`      .i.;
 .7<..........~<<3?7!`    4. r  `          G%
                           J.` .!           %
                             JiJ           .`
                               .1.         J
                                  ?1.     .'
                                      7<..%

       ____    ____
    _ | ___|  | __ )  ___  _ __  _   _ ___
  _| ||___ \  |  _ \ / _ \| '_ \| | | / __|
 |_   _|__) | | |_) | (_) | | | | |_| \__ \
   |_||____/  |____/ \___/|_| |_|\__,_|___/

 TOTAL POINTS: 40 / 35


(C) Optimizations
~~~~~~~~~~~~~~~~~

  Describe in some detail the optimizations you used to speed the code
  up.  THE CODE SHOULD CONTAIN SOME COMMENTS already to describe these
  but in the section below, describe in English the techniques you used
  to make the code run faster.  Format your descriptions into discrete
  chunks such as.

        TWO-BY-TWO-PARTITION-MATRIX
        This should make it run faster because it uses 2x2 partitions of the matrix using the hidden blueprint of vertices for more optimization
        It does sixteen subproblems at a time, accessing rows and columns more efficiently which is better memory access, which makes it a lot faster than the base code

        OPTIMIZATION 1:
            TWO-BY-TWO-PARTITION-MATRIX is using rows-columns memory access because it is more efficient to do access the rows than the columns

        OPTIMIZATION 2:
            TWO-BY-TWO-PARTITION-MATRIX is using pipelining through loop unrolling which makes it faster



  Full credit solutions will have a least two optimizations and describe
  WHY these improved performance in at least a couple sentences.


PROBLEM 2: Timing Search Algorithms
===================================

  Do your timing study on atlas.cselabs.umn.edu. In most cases, report
  times larger than 1e-03 seconds as times shorter than this are
  unreliable. Run searches for more repetitions to lengthen run times.


(A) Min Size for Algorithmic Differences
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Determine the size of input array does one start to see a measurable
  difference in the performance of the linear and logarithmic
  algorithms.  Produce a timing table which includes all algorithms
  which clearly demonstrates an uptick in the times associated with some
  while others remain much lower.  Identify what size this appears to be
  a occur.

  $ ./search_benchmark 5 10 10
   LENGTH   SEARCHES           array            list          binary            tree
       32        640    6.010000e-04    5.700000e-04    1.930000e-04    1.900000e-04
       64       1280    2.137000e-03    2.147000e-03    4.220000e-04    4.180000e-04
      128       2560    8.285000e-03    8.182000e-03    9.240000e-04    8.900000e-04
      256       5120    3.255300e-02    3.259600e-02    1.971000e-03    1.898000e-03
      512      10240    1.291900e-01    1.354720e-01    4.163000e-03    4.030000e-03
     1024      20480    5.116890e-01    1.360792e+00    8.845000e-03    8.599000e-03


     The pairs (array, list) and (binary, tree) are relatively similar to each other.
     For the pair (array, list), the array is faster for smaller searches and for the long run, while the list is faster in average searches
     For the pair (binary, tree), the binary is faster for small and average searches, but the tree is faster for long searches
     The pair (binary, tree) however, are much faster than the pair (array, list) because it runs in O(log(n)) instead of O(n)


(B) Linear Search in List vs Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Determine whether the linear array and linked list search remain
  approximately at the same performance level as size increases to large
  data or whether one begins to become favorable over other. Determine
  the approximate size at which this divergence becomes obvious. Discuss
  reasons WHY this difference arises.

  For the pair (array, list), the array is faster for smaller searches and for the long run, while the list is faster in average searches
  It differs on how long the searches are and how it affects the memory access

(C) Binary Search in Tree vs Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the binary array search and binary tree search on small to
  very large arrays. Determine if there is a size at which the
  performance of these two begins to diverge. If so, describe why this
  might be happening based on your understanding of the data structures
  and the memory system. If not, describe why you believe there is
  little performance difference between the two.

  Binary Search in Array is faster than Tree in the long run with multiple repetitions
  because its easier to access the memory of the array through cache because how it is laid out than accessing the memory of a tree which uses nodes

(D) Caching Effects on Algorithms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  It is commonly believed that memory systems that feature a Cache will
  lead to arrays performing faster than linked structures such as Linked
  Lists and Binary Search Trees. Describe whether your timings confirm
  or refute this belief.  Address both types of algorithms in your
  answer:
  - What effects does Cache have on Linear Search in arrays and lists
    and why?
    Cache in linear array is better in usage most of the time because of how it is laid out in memory than lists that have random memory locations
  - What effects does Cache have on Binary Search in arrays and trees
    and why?
    Cache in binary array is similar in usage because of both binary and tree are jumping around, which is similar approach in terms of memory access


(E) OPTIONAL MAKEUP CREDIT
~~~~~~~~~~~~~~~~~~~~~~~~~~

  If you decided to make use of a table of function pointers/structs
  which is worth makeup credit, describe your basic design for this
  below.
